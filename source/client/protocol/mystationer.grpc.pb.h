// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mystationer.proto
#ifndef GRPC_mystationer_2eproto__INCLUDED
#define GRPC_mystationer_2eproto__INCLUDED

#include "mystationer.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace stationerspace {

// 设计思想是尽可能的将操作原子化，对复杂的业务逻辑进行解耦合
class StationerOrder final {
 public:
  static constexpr char const* service_full_name() {
    return "stationerspace.StationerOrder";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // get message
    virtual ::grpc::Status GetStationOrderList(::grpc::ClientContext* context, const ::stationerspace::StationId& request, ::stationerspace::SaveOrderList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::SaveOrderList>> AsyncGetStationOrderList(::grpc::ClientContext* context, const ::stationerspace::StationId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::SaveOrderList>>(AsyncGetStationOrderListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::SaveOrderList>> PrepareAsyncGetStationOrderList(::grpc::ClientContext* context, const ::stationerspace::StationId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::SaveOrderList>>(PrepareAsyncGetStationOrderListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStationerInfo(::grpc::ClientContext* context, const ::stationerspace::StationerId& request, ::stationerspace::StationerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::StationerInfo>> AsyncGetStationerInfo(::grpc::ClientContext* context, const ::stationerspace::StationerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::StationerInfo>>(AsyncGetStationerInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::StationerInfo>> PrepareAsyncGetStationerInfo(::grpc::ClientContext* context, const ::stationerspace::StationerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::StationerInfo>>(PrepareAsyncGetStationerInfoRaw(context, request, cq));
    }
    // post message
    virtual ::grpc::Status InStation(::grpc::ClientContext* context, const ::stationerspace::InStationRequest& request, ::stationerspace::BaseReply2* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>> AsyncInStation(::grpc::ClientContext* context, const ::stationerspace::InStationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>>(AsyncInStationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>> PrepareAsyncInStation(::grpc::ClientContext* context, const ::stationerspace::InStationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>>(PrepareAsyncInStationRaw(context, request, cq));
    }
    virtual ::grpc::Status OutStation(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest& request, ::stationerspace::BaseReply2* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>> AsyncOutStation(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>>(AsyncOutStationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>> PrepareAsyncOutStation(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>>(PrepareAsyncOutStationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // get message
      virtual void GetStationOrderList(::grpc::ClientContext* context, const ::stationerspace::StationId* request, ::stationerspace::SaveOrderList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStationOrderList(::grpc::ClientContext* context, const ::stationerspace::StationId* request, ::stationerspace::SaveOrderList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetStationerInfo(::grpc::ClientContext* context, const ::stationerspace::StationerId* request, ::stationerspace::StationerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStationerInfo(::grpc::ClientContext* context, const ::stationerspace::StationerId* request, ::stationerspace::StationerInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // post message
      virtual void InStation(::grpc::ClientContext* context, const ::stationerspace::InStationRequest* request, ::stationerspace::BaseReply2* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InStation(::grpc::ClientContext* context, const ::stationerspace::InStationRequest* request, ::stationerspace::BaseReply2* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OutStation(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest* request, ::stationerspace::BaseReply2* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OutStation(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest* request, ::stationerspace::BaseReply2* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::SaveOrderList>* AsyncGetStationOrderListRaw(::grpc::ClientContext* context, const ::stationerspace::StationId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::SaveOrderList>* PrepareAsyncGetStationOrderListRaw(::grpc::ClientContext* context, const ::stationerspace::StationId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::StationerInfo>* AsyncGetStationerInfoRaw(::grpc::ClientContext* context, const ::stationerspace::StationerId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::StationerInfo>* PrepareAsyncGetStationerInfoRaw(::grpc::ClientContext* context, const ::stationerspace::StationerId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>* AsyncInStationRaw(::grpc::ClientContext* context, const ::stationerspace::InStationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>* PrepareAsyncInStationRaw(::grpc::ClientContext* context, const ::stationerspace::InStationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>* AsyncOutStationRaw(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stationerspace::BaseReply2>* PrepareAsyncOutStationRaw(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetStationOrderList(::grpc::ClientContext* context, const ::stationerspace::StationId& request, ::stationerspace::SaveOrderList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::SaveOrderList>> AsyncGetStationOrderList(::grpc::ClientContext* context, const ::stationerspace::StationId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::SaveOrderList>>(AsyncGetStationOrderListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::SaveOrderList>> PrepareAsyncGetStationOrderList(::grpc::ClientContext* context, const ::stationerspace::StationId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::SaveOrderList>>(PrepareAsyncGetStationOrderListRaw(context, request, cq));
    }
    ::grpc::Status GetStationerInfo(::grpc::ClientContext* context, const ::stationerspace::StationerId& request, ::stationerspace::StationerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::StationerInfo>> AsyncGetStationerInfo(::grpc::ClientContext* context, const ::stationerspace::StationerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::StationerInfo>>(AsyncGetStationerInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::StationerInfo>> PrepareAsyncGetStationerInfo(::grpc::ClientContext* context, const ::stationerspace::StationerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::StationerInfo>>(PrepareAsyncGetStationerInfoRaw(context, request, cq));
    }
    ::grpc::Status InStation(::grpc::ClientContext* context, const ::stationerspace::InStationRequest& request, ::stationerspace::BaseReply2* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>> AsyncInStation(::grpc::ClientContext* context, const ::stationerspace::InStationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>>(AsyncInStationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>> PrepareAsyncInStation(::grpc::ClientContext* context, const ::stationerspace::InStationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>>(PrepareAsyncInStationRaw(context, request, cq));
    }
    ::grpc::Status OutStation(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest& request, ::stationerspace::BaseReply2* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>> AsyncOutStation(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>>(AsyncOutStationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>> PrepareAsyncOutStation(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>>(PrepareAsyncOutStationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetStationOrderList(::grpc::ClientContext* context, const ::stationerspace::StationId* request, ::stationerspace::SaveOrderList* response, std::function<void(::grpc::Status)>) override;
      void GetStationOrderList(::grpc::ClientContext* context, const ::stationerspace::StationId* request, ::stationerspace::SaveOrderList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStationerInfo(::grpc::ClientContext* context, const ::stationerspace::StationerId* request, ::stationerspace::StationerInfo* response, std::function<void(::grpc::Status)>) override;
      void GetStationerInfo(::grpc::ClientContext* context, const ::stationerspace::StationerId* request, ::stationerspace::StationerInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InStation(::grpc::ClientContext* context, const ::stationerspace::InStationRequest* request, ::stationerspace::BaseReply2* response, std::function<void(::grpc::Status)>) override;
      void InStation(::grpc::ClientContext* context, const ::stationerspace::InStationRequest* request, ::stationerspace::BaseReply2* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OutStation(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest* request, ::stationerspace::BaseReply2* response, std::function<void(::grpc::Status)>) override;
      void OutStation(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest* request, ::stationerspace::BaseReply2* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::stationerspace::SaveOrderList>* AsyncGetStationOrderListRaw(::grpc::ClientContext* context, const ::stationerspace::StationId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::stationerspace::SaveOrderList>* PrepareAsyncGetStationOrderListRaw(::grpc::ClientContext* context, const ::stationerspace::StationId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::stationerspace::StationerInfo>* AsyncGetStationerInfoRaw(::grpc::ClientContext* context, const ::stationerspace::StationerId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::stationerspace::StationerInfo>* PrepareAsyncGetStationerInfoRaw(::grpc::ClientContext* context, const ::stationerspace::StationerId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>* AsyncInStationRaw(::grpc::ClientContext* context, const ::stationerspace::InStationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>* PrepareAsyncInStationRaw(::grpc::ClientContext* context, const ::stationerspace::InStationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>* AsyncOutStationRaw(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::stationerspace::BaseReply2>* PrepareAsyncOutStationRaw(::grpc::ClientContext* context, const ::stationerspace::OutStationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStationOrderList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStationerInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_InStation_;
    const ::grpc::internal::RpcMethod rpcmethod_OutStation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // get message
    virtual ::grpc::Status GetStationOrderList(::grpc::ServerContext* context, const ::stationerspace::StationId* request, ::stationerspace::SaveOrderList* response);
    virtual ::grpc::Status GetStationerInfo(::grpc::ServerContext* context, const ::stationerspace::StationerId* request, ::stationerspace::StationerInfo* response);
    // post message
    virtual ::grpc::Status InStation(::grpc::ServerContext* context, const ::stationerspace::InStationRequest* request, ::stationerspace::BaseReply2* response);
    virtual ::grpc::Status OutStation(::grpc::ServerContext* context, const ::stationerspace::OutStationRequest* request, ::stationerspace::BaseReply2* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStationOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStationOrderList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStationOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStationOrderList(::grpc::ServerContext* /*context*/, const ::stationerspace::StationId* /*request*/, ::stationerspace::SaveOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStationOrderList(::grpc::ServerContext* context, ::stationerspace::StationId* request, ::grpc::ServerAsyncResponseWriter< ::stationerspace::SaveOrderList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStationerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStationerInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetStationerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStationerInfo(::grpc::ServerContext* /*context*/, const ::stationerspace::StationerId* /*request*/, ::stationerspace::StationerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStationerInfo(::grpc::ServerContext* context, ::stationerspace::StationerId* request, ::grpc::ServerAsyncResponseWriter< ::stationerspace::StationerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InStation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InStation(::grpc::ServerContext* /*context*/, const ::stationerspace::InStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInStation(::grpc::ServerContext* context, ::stationerspace::InStationRequest* request, ::grpc::ServerAsyncResponseWriter< ::stationerspace::BaseReply2>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OutStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OutStation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_OutStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutStation(::grpc::ServerContext* /*context*/, const ::stationerspace::OutStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOutStation(::grpc::ServerContext* context, ::stationerspace::OutStationRequest* request, ::grpc::ServerAsyncResponseWriter< ::stationerspace::BaseReply2>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStationOrderList<WithAsyncMethod_GetStationerInfo<WithAsyncMethod_InStation<WithAsyncMethod_OutStation<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetStationOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStationOrderList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::stationerspace::StationId, ::stationerspace::SaveOrderList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::stationerspace::StationId* request, ::stationerspace::SaveOrderList* response) { return this->GetStationOrderList(context, request, response); }));}
    void SetMessageAllocatorFor_GetStationOrderList(
        ::grpc::MessageAllocator< ::stationerspace::StationId, ::stationerspace::SaveOrderList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::stationerspace::StationId, ::stationerspace::SaveOrderList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStationOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStationOrderList(::grpc::ServerContext* /*context*/, const ::stationerspace::StationId* /*request*/, ::stationerspace::SaveOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStationOrderList(
      ::grpc::CallbackServerContext* /*context*/, const ::stationerspace::StationId* /*request*/, ::stationerspace::SaveOrderList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStationerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStationerInfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::stationerspace::StationerId, ::stationerspace::StationerInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::stationerspace::StationerId* request, ::stationerspace::StationerInfo* response) { return this->GetStationerInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetStationerInfo(
        ::grpc::MessageAllocator< ::stationerspace::StationerId, ::stationerspace::StationerInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::stationerspace::StationerId, ::stationerspace::StationerInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStationerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStationerInfo(::grpc::ServerContext* /*context*/, const ::stationerspace::StationerId* /*request*/, ::stationerspace::StationerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStationerInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::stationerspace::StationerId* /*request*/, ::stationerspace::StationerInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InStation() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::stationerspace::InStationRequest, ::stationerspace::BaseReply2>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::stationerspace::InStationRequest* request, ::stationerspace::BaseReply2* response) { return this->InStation(context, request, response); }));}
    void SetMessageAllocatorFor_InStation(
        ::grpc::MessageAllocator< ::stationerspace::InStationRequest, ::stationerspace::BaseReply2>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::stationerspace::InStationRequest, ::stationerspace::BaseReply2>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InStation(::grpc::ServerContext* /*context*/, const ::stationerspace::InStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InStation(
      ::grpc::CallbackServerContext* /*context*/, const ::stationerspace::InStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OutStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OutStation() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::stationerspace::OutStationRequest, ::stationerspace::BaseReply2>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::stationerspace::OutStationRequest* request, ::stationerspace::BaseReply2* response) { return this->OutStation(context, request, response); }));}
    void SetMessageAllocatorFor_OutStation(
        ::grpc::MessageAllocator< ::stationerspace::OutStationRequest, ::stationerspace::BaseReply2>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::stationerspace::OutStationRequest, ::stationerspace::BaseReply2>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OutStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutStation(::grpc::ServerContext* /*context*/, const ::stationerspace::OutStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OutStation(
      ::grpc::CallbackServerContext* /*context*/, const ::stationerspace::OutStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetStationOrderList<WithCallbackMethod_GetStationerInfo<WithCallbackMethod_InStation<WithCallbackMethod_OutStation<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStationOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStationOrderList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStationOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStationOrderList(::grpc::ServerContext* /*context*/, const ::stationerspace::StationId* /*request*/, ::stationerspace::SaveOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStationerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStationerInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetStationerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStationerInfo(::grpc::ServerContext* /*context*/, const ::stationerspace::StationerId* /*request*/, ::stationerspace::StationerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InStation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InStation(::grpc::ServerContext* /*context*/, const ::stationerspace::InStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OutStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OutStation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_OutStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutStation(::grpc::ServerContext* /*context*/, const ::stationerspace::OutStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStationOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStationOrderList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetStationOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStationOrderList(::grpc::ServerContext* /*context*/, const ::stationerspace::StationId* /*request*/, ::stationerspace::SaveOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStationOrderList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStationerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStationerInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetStationerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStationerInfo(::grpc::ServerContext* /*context*/, const ::stationerspace::StationerId* /*request*/, ::stationerspace::StationerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStationerInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InStation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InStation(::grpc::ServerContext* /*context*/, const ::stationerspace::InStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInStation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OutStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OutStation() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_OutStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutStation(::grpc::ServerContext* /*context*/, const ::stationerspace::OutStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOutStation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStationOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStationOrderList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStationOrderList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStationOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStationOrderList(::grpc::ServerContext* /*context*/, const ::stationerspace::StationId* /*request*/, ::stationerspace::SaveOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStationOrderList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStationerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStationerInfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStationerInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStationerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStationerInfo(::grpc::ServerContext* /*context*/, const ::stationerspace::StationerId* /*request*/, ::stationerspace::StationerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStationerInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InStation() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InStation(context, request, response); }));
    }
    ~WithRawCallbackMethod_InStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InStation(::grpc::ServerContext* /*context*/, const ::stationerspace::InStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InStation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OutStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OutStation() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OutStation(context, request, response); }));
    }
    ~WithRawCallbackMethod_OutStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutStation(::grpc::ServerContext* /*context*/, const ::stationerspace::OutStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OutStation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStationOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStationOrderList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::stationerspace::StationId, ::stationerspace::SaveOrderList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::stationerspace::StationId, ::stationerspace::SaveOrderList>* streamer) {
                       return this->StreamedGetStationOrderList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStationOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStationOrderList(::grpc::ServerContext* /*context*/, const ::stationerspace::StationId* /*request*/, ::stationerspace::SaveOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStationOrderList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::stationerspace::StationId,::stationerspace::SaveOrderList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStationerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStationerInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::stationerspace::StationerId, ::stationerspace::StationerInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::stationerspace::StationerId, ::stationerspace::StationerInfo>* streamer) {
                       return this->StreamedGetStationerInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStationerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStationerInfo(::grpc::ServerContext* /*context*/, const ::stationerspace::StationerId* /*request*/, ::stationerspace::StationerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStationerInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::stationerspace::StationerId,::stationerspace::StationerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InStation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::stationerspace::InStationRequest, ::stationerspace::BaseReply2>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::stationerspace::InStationRequest, ::stationerspace::BaseReply2>* streamer) {
                       return this->StreamedInStation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InStation(::grpc::ServerContext* /*context*/, const ::stationerspace::InStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInStation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::stationerspace::InStationRequest,::stationerspace::BaseReply2>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OutStation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OutStation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::stationerspace::OutStationRequest, ::stationerspace::BaseReply2>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::stationerspace::OutStationRequest, ::stationerspace::BaseReply2>* streamer) {
                       return this->StreamedOutStation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OutStation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OutStation(::grpc::ServerContext* /*context*/, const ::stationerspace::OutStationRequest* /*request*/, ::stationerspace::BaseReply2* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOutStation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::stationerspace::OutStationRequest,::stationerspace::BaseReply2>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStationOrderList<WithStreamedUnaryMethod_GetStationerInfo<WithStreamedUnaryMethod_InStation<WithStreamedUnaryMethod_OutStation<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStationOrderList<WithStreamedUnaryMethod_GetStationerInfo<WithStreamedUnaryMethod_InStation<WithStreamedUnaryMethod_OutStation<Service > > > > StreamedService;
};

}  // namespace stationerspace


#endif  // GRPC_mystationer_2eproto__INCLUDED
