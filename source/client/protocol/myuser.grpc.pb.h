// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: myuser.proto
#ifndef GRPC_myuser_2eproto__INCLUDED
#define GRPC_myuser_2eproto__INCLUDED

#include "myuser.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace userspace {

// OrderDetail等已经实现的定义暂时不修改（因为是双向的，且数据来源不同），实际返回时不填充对应数据段即可
//
class UserOrder final {
 public:
  static constexpr char const* service_full_name() {
    return "userspace.UserOrder";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // get message
    virtual ::grpc::Status GetOrderList(::grpc::ClientContext* context, const ::userspace::UserId& request, ::userspace::OrderList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::OrderList>> AsyncGetOrderList(::grpc::ClientContext* context, const ::userspace::UserId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::OrderList>>(AsyncGetOrderListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::OrderList>> PrepareAsyncGetOrderList(::grpc::ClientContext* context, const ::userspace::UserId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::OrderList>>(PrepareAsyncGetOrderListRaw(context, request, cq));
    }
    // 包含detail
    virtual ::grpc::Status GetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::userspace::SpecificOrder* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::SpecificOrder>> AsyncGetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::SpecificOrder>>(AsyncGetSpecificOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::SpecificOrder>> PrepareAsyncGetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::SpecificOrder>>(PrepareAsyncGetSpecificOrderRaw(context, request, cq));
    }
    // post message
    virtual ::grpc::Status CreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::userspace::BaseReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>> AsyncCreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>>(AsyncCreateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>> PrepareAsyncCreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>>(PrepareAsyncCreateOrderRaw(context, request, cq));
    }
    // 寄件
    virtual ::grpc::Status UpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::userspace::BaseReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>> AsyncUpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>>(AsyncUpdateOrderStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>> PrepareAsyncUpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>>(PrepareAsyncUpdateOrderStateRaw(context, request, cq));
    }
    // 确认收件
    class async_interface {
     public:
      virtual ~async_interface() {}
      // get message
      virtual void GetOrderList(::grpc::ClientContext* context, const ::userspace::UserId* request, ::userspace::OrderList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrderList(::grpc::ClientContext* context, const ::userspace::UserId* request, ::userspace::OrderList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 包含detail
      virtual void GetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId* request, ::userspace::SpecificOrder* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId* request, ::userspace::SpecificOrder* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // post message
      virtual void CreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail* request, ::userspace::BaseReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail* request, ::userspace::BaseReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 寄件
      virtual void UpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest* request, ::userspace::BaseReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest* request, ::userspace::BaseReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 确认收件
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userspace::OrderList>* AsyncGetOrderListRaw(::grpc::ClientContext* context, const ::userspace::UserId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userspace::OrderList>* PrepareAsyncGetOrderListRaw(::grpc::ClientContext* context, const ::userspace::UserId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userspace::SpecificOrder>* AsyncGetSpecificOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userspace::SpecificOrder>* PrepareAsyncGetSpecificOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>* AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>* PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>* AsyncUpdateOrderStateRaw(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userspace::BaseReply>* PrepareAsyncUpdateOrderStateRaw(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetOrderList(::grpc::ClientContext* context, const ::userspace::UserId& request, ::userspace::OrderList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::OrderList>> AsyncGetOrderList(::grpc::ClientContext* context, const ::userspace::UserId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::OrderList>>(AsyncGetOrderListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::OrderList>> PrepareAsyncGetOrderList(::grpc::ClientContext* context, const ::userspace::UserId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::OrderList>>(PrepareAsyncGetOrderListRaw(context, request, cq));
    }
    ::grpc::Status GetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::userspace::SpecificOrder* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::SpecificOrder>> AsyncGetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::SpecificOrder>>(AsyncGetSpecificOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::SpecificOrder>> PrepareAsyncGetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::SpecificOrder>>(PrepareAsyncGetSpecificOrderRaw(context, request, cq));
    }
    ::grpc::Status CreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::userspace::BaseReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>> AsyncCreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>>(AsyncCreateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>> PrepareAsyncCreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>>(PrepareAsyncCreateOrderRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::userspace::BaseReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>> AsyncUpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>>(AsyncUpdateOrderStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>> PrepareAsyncUpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>>(PrepareAsyncUpdateOrderStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetOrderList(::grpc::ClientContext* context, const ::userspace::UserId* request, ::userspace::OrderList* response, std::function<void(::grpc::Status)>) override;
      void GetOrderList(::grpc::ClientContext* context, const ::userspace::UserId* request, ::userspace::OrderList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId* request, ::userspace::SpecificOrder* response, std::function<void(::grpc::Status)>) override;
      void GetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId* request, ::userspace::SpecificOrder* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail* request, ::userspace::BaseReply* response, std::function<void(::grpc::Status)>) override;
      void CreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail* request, ::userspace::BaseReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest* request, ::userspace::BaseReply* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest* request, ::userspace::BaseReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::userspace::OrderList>* AsyncGetOrderListRaw(::grpc::ClientContext* context, const ::userspace::UserId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userspace::OrderList>* PrepareAsyncGetOrderListRaw(::grpc::ClientContext* context, const ::userspace::UserId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userspace::SpecificOrder>* AsyncGetSpecificOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userspace::SpecificOrder>* PrepareAsyncGetSpecificOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>* AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>* PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>* AsyncUpdateOrderStateRaw(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>* PrepareAsyncUpdateOrderStateRaw(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrderList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpecificOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrderState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // get message
    virtual ::grpc::Status GetOrderList(::grpc::ServerContext* context, const ::userspace::UserId* request, ::userspace::OrderList* response);
    // 包含detail
    virtual ::grpc::Status GetSpecificOrder(::grpc::ServerContext* context, const ::userspace::OrderId* request, ::userspace::SpecificOrder* response);
    // post message
    virtual ::grpc::Status CreateOrder(::grpc::ServerContext* context, const ::userspace::OrderDetail* request, ::userspace::BaseReply* response);
    // 寄件
    virtual ::grpc::Status UpdateOrderState(::grpc::ServerContext* context, const ::userspace::UpdateOrderStateRequest* request, ::userspace::BaseReply* response);
    // 确认收件
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrderList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderList(::grpc::ServerContext* /*context*/, const ::userspace::UserId* /*request*/, ::userspace::OrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrderList(::grpc::ServerContext* context, ::userspace::UserId* request, ::grpc::ServerAsyncResponseWriter< ::userspace::OrderList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpecificOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSpecificOrder() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSpecificOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpecificOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderId* /*request*/, ::userspace::SpecificOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpecificOrder(::grpc::ServerContext* context, ::userspace::OrderId* request, ::grpc::ServerAsyncResponseWriter< ::userspace::SpecificOrder>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateOrder() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderDetail* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrder(::grpc::ServerContext* context, ::userspace::OrderDetail* request, ::grpc::ServerAsyncResponseWriter< ::userspace::BaseReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrderState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOrderState() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateOrderState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrderState(::grpc::ServerContext* /*context*/, const ::userspace::UpdateOrderStateRequest* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrderState(::grpc::ServerContext* context, ::userspace::UpdateOrderStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::userspace::BaseReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetOrderList<WithAsyncMethod_GetSpecificOrder<WithAsyncMethod_CreateOrder<WithAsyncMethod_UpdateOrderState<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOrderList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::userspace::UserId, ::userspace::OrderList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::userspace::UserId* request, ::userspace::OrderList* response) { return this->GetOrderList(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrderList(
        ::grpc::MessageAllocator< ::userspace::UserId, ::userspace::OrderList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::userspace::UserId, ::userspace::OrderList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderList(::grpc::ServerContext* /*context*/, const ::userspace::UserId* /*request*/, ::userspace::OrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrderList(
      ::grpc::CallbackServerContext* /*context*/, const ::userspace::UserId* /*request*/, ::userspace::OrderList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSpecificOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSpecificOrder() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::userspace::OrderId, ::userspace::SpecificOrder>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::userspace::OrderId* request, ::userspace::SpecificOrder* response) { return this->GetSpecificOrder(context, request, response); }));}
    void SetMessageAllocatorFor_GetSpecificOrder(
        ::grpc::MessageAllocator< ::userspace::OrderId, ::userspace::SpecificOrder>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::userspace::OrderId, ::userspace::SpecificOrder>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSpecificOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpecificOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderId* /*request*/, ::userspace::SpecificOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpecificOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::userspace::OrderId* /*request*/, ::userspace::SpecificOrder* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateOrder() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::userspace::OrderDetail, ::userspace::BaseReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::userspace::OrderDetail* request, ::userspace::BaseReply* response) { return this->CreateOrder(context, request, response); }));}
    void SetMessageAllocatorFor_CreateOrder(
        ::grpc::MessageAllocator< ::userspace::OrderDetail, ::userspace::BaseReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::userspace::OrderDetail, ::userspace::BaseReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderDetail* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::userspace::OrderDetail* /*request*/, ::userspace::BaseReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateOrderState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateOrderState() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::userspace::UpdateOrderStateRequest, ::userspace::BaseReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::userspace::UpdateOrderStateRequest* request, ::userspace::BaseReply* response) { return this->UpdateOrderState(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOrderState(
        ::grpc::MessageAllocator< ::userspace::UpdateOrderStateRequest, ::userspace::BaseReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::userspace::UpdateOrderStateRequest, ::userspace::BaseReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateOrderState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrderState(::grpc::ServerContext* /*context*/, const ::userspace::UpdateOrderStateRequest* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrderState(
      ::grpc::CallbackServerContext* /*context*/, const ::userspace::UpdateOrderStateRequest* /*request*/, ::userspace::BaseReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetOrderList<WithCallbackMethod_GetSpecificOrder<WithCallbackMethod_CreateOrder<WithCallbackMethod_UpdateOrderState<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrderList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderList(::grpc::ServerContext* /*context*/, const ::userspace::UserId* /*request*/, ::userspace::OrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpecificOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSpecificOrder() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSpecificOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpecificOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderId* /*request*/, ::userspace::SpecificOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateOrder() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderDetail* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrderState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOrderState() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateOrderState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrderState(::grpc::ServerContext* /*context*/, const ::userspace::UpdateOrderStateRequest* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrderList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderList(::grpc::ServerContext* /*context*/, const ::userspace::UserId* /*request*/, ::userspace::OrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrderList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpecificOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSpecificOrder() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSpecificOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpecificOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderId* /*request*/, ::userspace::SpecificOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpecificOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateOrder() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderDetail* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrderState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOrderState() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateOrderState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrderState(::grpc::ServerContext* /*context*/, const ::userspace::UpdateOrderStateRequest* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrderState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOrderList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrderList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderList(::grpc::ServerContext* /*context*/, const ::userspace::UserId* /*request*/, ::userspace::OrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrderList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSpecificOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSpecificOrder() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSpecificOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSpecificOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpecificOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderId* /*request*/, ::userspace::SpecificOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpecificOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateOrder() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderDetail* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateOrderState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateOrderState() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOrderState(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateOrderState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrderState(::grpc::ServerContext* /*context*/, const ::userspace::UpdateOrderStateRequest* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrderState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrderList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrderList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::userspace::UserId, ::userspace::OrderList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::userspace::UserId, ::userspace::OrderList>* streamer) {
                       return this->StreamedGetOrderList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOrderList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrderList(::grpc::ServerContext* /*context*/, const ::userspace::UserId* /*request*/, ::userspace::OrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrderList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::userspace::UserId,::userspace::OrderList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpecificOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSpecificOrder() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::userspace::OrderId, ::userspace::SpecificOrder>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::userspace::OrderId, ::userspace::SpecificOrder>* streamer) {
                       return this->StreamedGetSpecificOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSpecificOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpecificOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderId* /*request*/, ::userspace::SpecificOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpecificOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::userspace::OrderId,::userspace::SpecificOrder>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateOrder() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::userspace::OrderDetail, ::userspace::BaseReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::userspace::OrderDetail, ::userspace::BaseReply>* streamer) {
                       return this->StreamedCreateOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::userspace::OrderDetail* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::userspace::OrderDetail,::userspace::BaseReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrderState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOrderState() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::userspace::UpdateOrderStateRequest, ::userspace::BaseReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::userspace::UpdateOrderStateRequest, ::userspace::BaseReply>* streamer) {
                       return this->StreamedUpdateOrderState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateOrderState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrderState(::grpc::ServerContext* /*context*/, const ::userspace::UpdateOrderStateRequest* /*request*/, ::userspace::BaseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrderState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::userspace::UpdateOrderStateRequest,::userspace::BaseReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetOrderList<WithStreamedUnaryMethod_GetSpecificOrder<WithStreamedUnaryMethod_CreateOrder<WithStreamedUnaryMethod_UpdateOrderState<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetOrderList<WithStreamedUnaryMethod_GetSpecificOrder<WithStreamedUnaryMethod_CreateOrder<WithStreamedUnaryMethod_UpdateOrderState<Service > > > > StreamedService;
};

}  // namespace userspace


#endif  // GRPC_myuser_2eproto__INCLUDED
