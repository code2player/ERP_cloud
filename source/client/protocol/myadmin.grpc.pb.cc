// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: myadmin.proto

#include "myadmin.pb.h"
#include "myadmin.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace adminspace {

static const char* AdminService_method_names[] = {
  "/adminspace.AdminService/GetAllItemList",
  "/adminspace.AdminService/GetAllStationList",
  "/adminspace.AdminService/GetAllOrderList",
  "/adminspace.AdminService/AddItem",
  "/adminspace.AdminService/DelItem",
  "/adminspace.AdminService/AddStation",
  "/adminspace.AdminService/DelStation",
  "/adminspace.AdminService/UpdateOrder",
};

std::unique_ptr< AdminService::Stub> AdminService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AdminService::Stub> stub(new AdminService::Stub(channel, options));
  return stub;
}

AdminService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAllItemList_(AdminService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllStationList_(AdminService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllOrderList_(AdminService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddItem_(AdminService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelItem_(AdminService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddStation_(AdminService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelStation_(AdminService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrder_(AdminService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AdminService::Stub::GetAllItemList(::grpc::ClientContext* context, const ::adminspace::AdminId& request, ::adminspace::AllItemList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adminspace::AdminId, ::adminspace::AllItemList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllItemList_, context, request, response);
}

void AdminService::Stub::async::GetAllItemList(::grpc::ClientContext* context, const ::adminspace::AdminId* request, ::adminspace::AllItemList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adminspace::AdminId, ::adminspace::AllItemList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllItemList_, context, request, response, std::move(f));
}

void AdminService::Stub::async::GetAllItemList(::grpc::ClientContext* context, const ::adminspace::AdminId* request, ::adminspace::AllItemList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllItemList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adminspace::AllItemList>* AdminService::Stub::PrepareAsyncGetAllItemListRaw(::grpc::ClientContext* context, const ::adminspace::AdminId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adminspace::AllItemList, ::adminspace::AdminId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllItemList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adminspace::AllItemList>* AdminService::Stub::AsyncGetAllItemListRaw(::grpc::ClientContext* context, const ::adminspace::AdminId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllItemListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::GetAllStationList(::grpc::ClientContext* context, const ::adminspace::AdminId& request, ::adminspace::AllStationList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adminspace::AdminId, ::adminspace::AllStationList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllStationList_, context, request, response);
}

void AdminService::Stub::async::GetAllStationList(::grpc::ClientContext* context, const ::adminspace::AdminId* request, ::adminspace::AllStationList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adminspace::AdminId, ::adminspace::AllStationList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllStationList_, context, request, response, std::move(f));
}

void AdminService::Stub::async::GetAllStationList(::grpc::ClientContext* context, const ::adminspace::AdminId* request, ::adminspace::AllStationList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllStationList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adminspace::AllStationList>* AdminService::Stub::PrepareAsyncGetAllStationListRaw(::grpc::ClientContext* context, const ::adminspace::AdminId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adminspace::AllStationList, ::adminspace::AdminId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllStationList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adminspace::AllStationList>* AdminService::Stub::AsyncGetAllStationListRaw(::grpc::ClientContext* context, const ::adminspace::AdminId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllStationListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::GetAllOrderList(::grpc::ClientContext* context, const ::adminspace::AdminId& request, ::adminspace::AllOrderList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adminspace::AdminId, ::adminspace::AllOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllOrderList_, context, request, response);
}

void AdminService::Stub::async::GetAllOrderList(::grpc::ClientContext* context, const ::adminspace::AdminId* request, ::adminspace::AllOrderList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adminspace::AdminId, ::adminspace::AllOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllOrderList_, context, request, response, std::move(f));
}

void AdminService::Stub::async::GetAllOrderList(::grpc::ClientContext* context, const ::adminspace::AdminId* request, ::adminspace::AllOrderList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllOrderList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adminspace::AllOrderList>* AdminService::Stub::PrepareAsyncGetAllOrderListRaw(::grpc::ClientContext* context, const ::adminspace::AdminId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adminspace::AllOrderList, ::adminspace::AdminId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllOrderList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adminspace::AllOrderList>* AdminService::Stub::AsyncGetAllOrderListRaw(::grpc::ClientContext* context, const ::adminspace::AdminId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllOrderListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::AddItem(::grpc::ClientContext* context, const ::adminspace::ItemInfo& request, ::adminspace::BaseReply3* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adminspace::ItemInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddItem_, context, request, response);
}

void AdminService::Stub::async::AddItem(::grpc::ClientContext* context, const ::adminspace::ItemInfo* request, ::adminspace::BaseReply3* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adminspace::ItemInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddItem_, context, request, response, std::move(f));
}

void AdminService::Stub::async::AddItem(::grpc::ClientContext* context, const ::adminspace::ItemInfo* request, ::adminspace::BaseReply3* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adminspace::BaseReply3>* AdminService::Stub::PrepareAsyncAddItemRaw(::grpc::ClientContext* context, const ::adminspace::ItemInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adminspace::BaseReply3, ::adminspace::ItemInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adminspace::BaseReply3>* AdminService::Stub::AsyncAddItemRaw(::grpc::ClientContext* context, const ::adminspace::ItemInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::DelItem(::grpc::ClientContext* context, const ::adminspace::ItemInfo& request, ::adminspace::BaseReply3* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adminspace::ItemInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelItem_, context, request, response);
}

void AdminService::Stub::async::DelItem(::grpc::ClientContext* context, const ::adminspace::ItemInfo* request, ::adminspace::BaseReply3* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adminspace::ItemInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelItem_, context, request, response, std::move(f));
}

void AdminService::Stub::async::DelItem(::grpc::ClientContext* context, const ::adminspace::ItemInfo* request, ::adminspace::BaseReply3* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adminspace::BaseReply3>* AdminService::Stub::PrepareAsyncDelItemRaw(::grpc::ClientContext* context, const ::adminspace::ItemInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adminspace::BaseReply3, ::adminspace::ItemInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adminspace::BaseReply3>* AdminService::Stub::AsyncDelItemRaw(::grpc::ClientContext* context, const ::adminspace::ItemInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::AddStation(::grpc::ClientContext* context, const ::adminspace::StationInfo& request, ::adminspace::BaseReply3* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adminspace::StationInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddStation_, context, request, response);
}

void AdminService::Stub::async::AddStation(::grpc::ClientContext* context, const ::adminspace::StationInfo* request, ::adminspace::BaseReply3* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adminspace::StationInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddStation_, context, request, response, std::move(f));
}

void AdminService::Stub::async::AddStation(::grpc::ClientContext* context, const ::adminspace::StationInfo* request, ::adminspace::BaseReply3* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddStation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adminspace::BaseReply3>* AdminService::Stub::PrepareAsyncAddStationRaw(::grpc::ClientContext* context, const ::adminspace::StationInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adminspace::BaseReply3, ::adminspace::StationInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddStation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adminspace::BaseReply3>* AdminService::Stub::AsyncAddStationRaw(::grpc::ClientContext* context, const ::adminspace::StationInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddStationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::DelStation(::grpc::ClientContext* context, const ::adminspace::StationInfo& request, ::adminspace::BaseReply3* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adminspace::StationInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelStation_, context, request, response);
}

void AdminService::Stub::async::DelStation(::grpc::ClientContext* context, const ::adminspace::StationInfo* request, ::adminspace::BaseReply3* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adminspace::StationInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelStation_, context, request, response, std::move(f));
}

void AdminService::Stub::async::DelStation(::grpc::ClientContext* context, const ::adminspace::StationInfo* request, ::adminspace::BaseReply3* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelStation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adminspace::BaseReply3>* AdminService::Stub::PrepareAsyncDelStationRaw(::grpc::ClientContext* context, const ::adminspace::StationInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adminspace::BaseReply3, ::adminspace::StationInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelStation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adminspace::BaseReply3>* AdminService::Stub::AsyncDelStationRaw(::grpc::ClientContext* context, const ::adminspace::StationInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelStationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::UpdateOrder(::grpc::ClientContext* context, const ::adminspace::OrderInfo& request, ::adminspace::BaseReply3* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adminspace::OrderInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateOrder_, context, request, response);
}

void AdminService::Stub::async::UpdateOrder(::grpc::ClientContext* context, const ::adminspace::OrderInfo* request, ::adminspace::BaseReply3* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adminspace::OrderInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrder_, context, request, response, std::move(f));
}

void AdminService::Stub::async::UpdateOrder(::grpc::ClientContext* context, const ::adminspace::OrderInfo* request, ::adminspace::BaseReply3* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adminspace::BaseReply3>* AdminService::Stub::PrepareAsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::adminspace::OrderInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adminspace::BaseReply3, ::adminspace::OrderInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adminspace::BaseReply3>* AdminService::Stub::AsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::adminspace::OrderInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

AdminService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::adminspace::AdminId, ::adminspace::AllItemList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adminspace::AdminId* req,
             ::adminspace::AllItemList* resp) {
               return service->GetAllItemList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::adminspace::AdminId, ::adminspace::AllStationList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adminspace::AdminId* req,
             ::adminspace::AllStationList* resp) {
               return service->GetAllStationList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::adminspace::AdminId, ::adminspace::AllOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adminspace::AdminId* req,
             ::adminspace::AllOrderList* resp) {
               return service->GetAllOrderList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::adminspace::ItemInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adminspace::ItemInfo* req,
             ::adminspace::BaseReply3* resp) {
               return service->AddItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::adminspace::ItemInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adminspace::ItemInfo* req,
             ::adminspace::BaseReply3* resp) {
               return service->DelItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::adminspace::StationInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adminspace::StationInfo* req,
             ::adminspace::BaseReply3* resp) {
               return service->AddStation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::adminspace::StationInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adminspace::StationInfo* req,
             ::adminspace::BaseReply3* resp) {
               return service->DelStation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::adminspace::OrderInfo, ::adminspace::BaseReply3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adminspace::OrderInfo* req,
             ::adminspace::BaseReply3* resp) {
               return service->UpdateOrder(ctx, req, resp);
             }, this)));
}

AdminService::Service::~Service() {
}

::grpc::Status AdminService::Service::GetAllItemList(::grpc::ServerContext* context, const ::adminspace::AdminId* request, ::adminspace::AllItemList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetAllStationList(::grpc::ServerContext* context, const ::adminspace::AdminId* request, ::adminspace::AllStationList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetAllOrderList(::grpc::ServerContext* context, const ::adminspace::AdminId* request, ::adminspace::AllOrderList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::AddItem(::grpc::ServerContext* context, const ::adminspace::ItemInfo* request, ::adminspace::BaseReply3* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::DelItem(::grpc::ServerContext* context, const ::adminspace::ItemInfo* request, ::adminspace::BaseReply3* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::AddStation(::grpc::ServerContext* context, const ::adminspace::StationInfo* request, ::adminspace::BaseReply3* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::DelStation(::grpc::ServerContext* context, const ::adminspace::StationInfo* request, ::adminspace::BaseReply3* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::UpdateOrder(::grpc::ServerContext* context, const ::adminspace::OrderInfo* request, ::adminspace::BaseReply3* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace adminspace

