// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myregister.proto

#include "myregister.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace registerspace {
PROTOBUF_CONSTEXPR UserRegisterRequest::UserRegisterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_phone__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_password__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_name__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_identity__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_secertkey__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.staff_station__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserRegisterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserRegisterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserRegisterRequestDefaultTypeInternal() {}
  union {
    UserRegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserRegisterRequestDefaultTypeInternal _UserRegisterRequest_default_instance_;
PROTOBUF_CONSTEXPR UserRegisterReply::UserRegisterReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.return_message__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.return_result__)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserRegisterReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserRegisterReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserRegisterReplyDefaultTypeInternal() {}
  union {
    UserRegisterReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserRegisterReplyDefaultTypeInternal _UserRegisterReply_default_instance_;
}  // namespace registerspace
static ::_pb::Metadata file_level_metadata_myregister_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_myregister_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_myregister_2eproto = nullptr;

const uint32_t TableStruct_myregister_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::registerspace::UserRegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::registerspace::UserRegisterRequest, _impl_.user_phone__),
  PROTOBUF_FIELD_OFFSET(::registerspace::UserRegisterRequest, _impl_.user_password__),
  PROTOBUF_FIELD_OFFSET(::registerspace::UserRegisterRequest, _impl_.user_name__),
  PROTOBUF_FIELD_OFFSET(::registerspace::UserRegisterRequest, _impl_.user_identity__),
  PROTOBUF_FIELD_OFFSET(::registerspace::UserRegisterRequest, _impl_.user_secertkey__),
  PROTOBUF_FIELD_OFFSET(::registerspace::UserRegisterRequest, _impl_.staff_station__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::registerspace::UserRegisterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::registerspace::UserRegisterReply, _impl_.return_result__),
  PROTOBUF_FIELD_OFFSET(::registerspace::UserRegisterReply, _impl_.return_message__),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::registerspace::UserRegisterRequest)},
  { 12, -1, -1, sizeof(::registerspace::UserRegisterReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::registerspace::_UserRegisterRequest_default_instance_._instance,
  &::registerspace::_UserRegisterReply_default_instance_._instance,
};

const char descriptor_table_protodef_myregister_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020myregister.proto\022\rregisterspace\"\237\001\n\023Us"
  "erRegisterRequest\022\023\n\013user_phone_\030\001 \001(\t\022\026"
  "\n\016user_password_\030\002 \001(\t\022\022\n\nuser_name_\030\003 \001"
  "(\t\022\026\n\016user_identity_\030\004 \001(\t\022\027\n\017user_secer"
  "tkey_\030\005 \001(\t\022\026\n\016staff_station_\030\006 \001(\t\"D\n\021U"
  "serRegisterReply\022\026\n\016return_result_\030\001 \001(\010"
  "\022\027\n\017return_message_\030\002 \001(\t2b\n\nMyRegister\022"
  "T\n\014UserRegister\022\".registerspace.UserRegi"
  "sterRequest\032 .registerspace.UserRegister"
  "Replyb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_myregister_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_myregister_2eproto = {
    false, false, 373, descriptor_table_protodef_myregister_2eproto,
    "myregister.proto",
    &descriptor_table_myregister_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_myregister_2eproto::offsets,
    file_level_metadata_myregister_2eproto, file_level_enum_descriptors_myregister_2eproto,
    file_level_service_descriptors_myregister_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_myregister_2eproto_getter() {
  return &descriptor_table_myregister_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_myregister_2eproto(&descriptor_table_myregister_2eproto);
namespace registerspace {

// ===================================================================

class UserRegisterRequest::_Internal {
 public:
};

UserRegisterRequest::UserRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:registerspace.UserRegisterRequest)
}
UserRegisterRequest::UserRegisterRequest(const UserRegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserRegisterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_phone__){}
    , decltype(_impl_.user_password__){}
    , decltype(_impl_.user_name__){}
    , decltype(_impl_.user_identity__){}
    , decltype(_impl_.user_secertkey__){}
    , decltype(_impl_.staff_station__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_phone__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_phone__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_phone_().empty()) {
    _this->_impl_.user_phone__.Set(from._internal_user_phone_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_password__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_password__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_password_().empty()) {
    _this->_impl_.user_password__.Set(from._internal_user_password_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_name__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name_().empty()) {
    _this->_impl_.user_name__.Set(from._internal_user_name_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_identity__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_identity__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_identity_().empty()) {
    _this->_impl_.user_identity__.Set(from._internal_user_identity_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_secertkey__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_secertkey__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_secertkey_().empty()) {
    _this->_impl_.user_secertkey__.Set(from._internal_user_secertkey_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.staff_station__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.staff_station__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_staff_station_().empty()) {
    _this->_impl_.staff_station__.Set(from._internal_staff_station_(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:registerspace.UserRegisterRequest)
}

inline void UserRegisterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_phone__){}
    , decltype(_impl_.user_password__){}
    , decltype(_impl_.user_name__){}
    , decltype(_impl_.user_identity__){}
    , decltype(_impl_.user_secertkey__){}
    , decltype(_impl_.staff_station__){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_phone__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_phone__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_password__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_password__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_name__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_identity__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_identity__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_secertkey__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_secertkey__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.staff_station__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.staff_station__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserRegisterRequest::~UserRegisterRequest() {
  // @@protoc_insertion_point(destructor:registerspace.UserRegisterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserRegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_phone__.Destroy();
  _impl_.user_password__.Destroy();
  _impl_.user_name__.Destroy();
  _impl_.user_identity__.Destroy();
  _impl_.user_secertkey__.Destroy();
  _impl_.staff_station__.Destroy();
}

void UserRegisterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserRegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:registerspace.UserRegisterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_phone__.ClearToEmpty();
  _impl_.user_password__.ClearToEmpty();
  _impl_.user_name__.ClearToEmpty();
  _impl_.user_identity__.ClearToEmpty();
  _impl_.user_secertkey__.ClearToEmpty();
  _impl_.staff_station__.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRegisterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_phone_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_phone_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "registerspace.UserRegisterRequest.user_phone_"));
        } else
          goto handle_unusual;
        continue;
      // string user_password_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_password_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "registerspace.UserRegisterRequest.user_password_"));
        } else
          goto handle_unusual;
        continue;
      // string user_name_ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_name_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "registerspace.UserRegisterRequest.user_name_"));
        } else
          goto handle_unusual;
        continue;
      // string user_identity_ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_identity_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "registerspace.UserRegisterRequest.user_identity_"));
        } else
          goto handle_unusual;
        continue;
      // string user_secertkey_ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_secertkey_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "registerspace.UserRegisterRequest.user_secertkey_"));
        } else
          goto handle_unusual;
        continue;
      // string staff_station_ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_staff_station_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "registerspace.UserRegisterRequest.staff_station_"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserRegisterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:registerspace.UserRegisterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_phone_ = 1;
  if (!this->_internal_user_phone_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_phone_().data(), static_cast<int>(this->_internal_user_phone_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "registerspace.UserRegisterRequest.user_phone_");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_phone_(), target);
  }

  // string user_password_ = 2;
  if (!this->_internal_user_password_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_password_().data(), static_cast<int>(this->_internal_user_password_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "registerspace.UserRegisterRequest.user_password_");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_password_(), target);
  }

  // string user_name_ = 3;
  if (!this->_internal_user_name_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name_().data(), static_cast<int>(this->_internal_user_name_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "registerspace.UserRegisterRequest.user_name_");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name_(), target);
  }

  // string user_identity_ = 4;
  if (!this->_internal_user_identity_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_identity_().data(), static_cast<int>(this->_internal_user_identity_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "registerspace.UserRegisterRequest.user_identity_");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_identity_(), target);
  }

  // string user_secertkey_ = 5;
  if (!this->_internal_user_secertkey_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_secertkey_().data(), static_cast<int>(this->_internal_user_secertkey_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "registerspace.UserRegisterRequest.user_secertkey_");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_secertkey_(), target);
  }

  // string staff_station_ = 6;
  if (!this->_internal_staff_station_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staff_station_().data(), static_cast<int>(this->_internal_staff_station_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "registerspace.UserRegisterRequest.staff_station_");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_staff_station_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:registerspace.UserRegisterRequest)
  return target;
}

size_t UserRegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:registerspace.UserRegisterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_phone_ = 1;
  if (!this->_internal_user_phone_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_phone_());
  }

  // string user_password_ = 2;
  if (!this->_internal_user_password_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_password_());
  }

  // string user_name_ = 3;
  if (!this->_internal_user_name_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name_());
  }

  // string user_identity_ = 4;
  if (!this->_internal_user_identity_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_identity_());
  }

  // string user_secertkey_ = 5;
  if (!this->_internal_user_secertkey_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_secertkey_());
  }

  // string staff_station_ = 6;
  if (!this->_internal_staff_station_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staff_station_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRegisterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserRegisterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRegisterRequest::GetClassData() const { return &_class_data_; }


void UserRegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserRegisterRequest*>(&to_msg);
  auto& from = static_cast<const UserRegisterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:registerspace.UserRegisterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_phone_().empty()) {
    _this->_internal_set_user_phone_(from._internal_user_phone_());
  }
  if (!from._internal_user_password_().empty()) {
    _this->_internal_set_user_password_(from._internal_user_password_());
  }
  if (!from._internal_user_name_().empty()) {
    _this->_internal_set_user_name_(from._internal_user_name_());
  }
  if (!from._internal_user_identity_().empty()) {
    _this->_internal_set_user_identity_(from._internal_user_identity_());
  }
  if (!from._internal_user_secertkey_().empty()) {
    _this->_internal_set_user_secertkey_(from._internal_user_secertkey_());
  }
  if (!from._internal_staff_station_().empty()) {
    _this->_internal_set_staff_station_(from._internal_staff_station_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRegisterRequest::CopyFrom(const UserRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:registerspace.UserRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegisterRequest::IsInitialized() const {
  return true;
}

void UserRegisterRequest::InternalSwap(UserRegisterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_phone__, lhs_arena,
      &other->_impl_.user_phone__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_password__, lhs_arena,
      &other->_impl_.user_password__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name__, lhs_arena,
      &other->_impl_.user_name__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_identity__, lhs_arena,
      &other->_impl_.user_identity__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_secertkey__, lhs_arena,
      &other->_impl_.user_secertkey__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.staff_station__, lhs_arena,
      &other->_impl_.staff_station__, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRegisterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myregister_2eproto_getter, &descriptor_table_myregister_2eproto_once,
      file_level_metadata_myregister_2eproto[0]);
}

// ===================================================================

class UserRegisterReply::_Internal {
 public:
};

UserRegisterReply::UserRegisterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:registerspace.UserRegisterReply)
}
UserRegisterReply::UserRegisterReply(const UserRegisterReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserRegisterReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.return_message__){}
    , decltype(_impl_.return_result__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.return_message__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_message__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_return_message_().empty()) {
    _this->_impl_.return_message__.Set(from._internal_return_message_(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.return_result__ = from._impl_.return_result__;
  // @@protoc_insertion_point(copy_constructor:registerspace.UserRegisterReply)
}

inline void UserRegisterReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.return_message__){}
    , decltype(_impl_.return_result__){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.return_message__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_message__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserRegisterReply::~UserRegisterReply() {
  // @@protoc_insertion_point(destructor:registerspace.UserRegisterReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserRegisterReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.return_message__.Destroy();
}

void UserRegisterReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserRegisterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:registerspace.UserRegisterReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.return_message__.ClearToEmpty();
  _impl_.return_result__ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRegisterReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool return_result_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.return_result__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string return_message_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_return_message_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "registerspace.UserRegisterReply.return_message_"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserRegisterReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:registerspace.UserRegisterReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool return_result_ = 1;
  if (this->_internal_return_result_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_return_result_(), target);
  }

  // string return_message_ = 2;
  if (!this->_internal_return_message_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_return_message_().data(), static_cast<int>(this->_internal_return_message_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "registerspace.UserRegisterReply.return_message_");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_return_message_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:registerspace.UserRegisterReply)
  return target;
}

size_t UserRegisterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:registerspace.UserRegisterReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string return_message_ = 2;
  if (!this->_internal_return_message_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_return_message_());
  }

  // bool return_result_ = 1;
  if (this->_internal_return_result_() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRegisterReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserRegisterReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRegisterReply::GetClassData() const { return &_class_data_; }


void UserRegisterReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserRegisterReply*>(&to_msg);
  auto& from = static_cast<const UserRegisterReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:registerspace.UserRegisterReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_return_message_().empty()) {
    _this->_internal_set_return_message_(from._internal_return_message_());
  }
  if (from._internal_return_result_() != 0) {
    _this->_internal_set_return_result_(from._internal_return_result_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRegisterReply::CopyFrom(const UserRegisterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:registerspace.UserRegisterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegisterReply::IsInitialized() const {
  return true;
}

void UserRegisterReply::InternalSwap(UserRegisterReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.return_message__, lhs_arena,
      &other->_impl_.return_message__, rhs_arena
  );
  swap(_impl_.return_result__, other->_impl_.return_result__);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRegisterReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myregister_2eproto_getter, &descriptor_table_myregister_2eproto_once,
      file_level_metadata_myregister_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace registerspace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::registerspace::UserRegisterRequest*
Arena::CreateMaybeMessage< ::registerspace::UserRegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::registerspace::UserRegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::registerspace::UserRegisterReply*
Arena::CreateMaybeMessage< ::registerspace::UserRegisterReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::registerspace::UserRegisterReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
