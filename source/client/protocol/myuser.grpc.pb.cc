// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: myuser.proto

#include "myuser.pb.h"
#include "myuser.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace userspace {

static const char* UserOrder_method_names[] = {
  "/userspace.UserOrder/GetOrderList",
  "/userspace.UserOrder/GetSpecificOrder",
  "/userspace.UserOrder/CreateOrder",
  "/userspace.UserOrder/UpdateOrderState",
};

std::unique_ptr< UserOrder::Stub> UserOrder::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserOrder::Stub> stub(new UserOrder::Stub(channel, options));
  return stub;
}

UserOrder::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetOrderList_(UserOrder_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpecificOrder_(UserOrder_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateOrder_(UserOrder_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrderState_(UserOrder_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserOrder::Stub::GetOrderList(::grpc::ClientContext* context, const ::userspace::UserId& request, ::userspace::OrderList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::userspace::UserId, ::userspace::OrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOrderList_, context, request, response);
}

void UserOrder::Stub::async::GetOrderList(::grpc::ClientContext* context, const ::userspace::UserId* request, ::userspace::OrderList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::userspace::UserId, ::userspace::OrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrderList_, context, request, response, std::move(f));
}

void UserOrder::Stub::async::GetOrderList(::grpc::ClientContext* context, const ::userspace::UserId* request, ::userspace::OrderList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrderList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::userspace::OrderList>* UserOrder::Stub::PrepareAsyncGetOrderListRaw(::grpc::ClientContext* context, const ::userspace::UserId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::userspace::OrderList, ::userspace::UserId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOrderList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::userspace::OrderList>* UserOrder::Stub::AsyncGetOrderListRaw(::grpc::ClientContext* context, const ::userspace::UserId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOrderListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserOrder::Stub::GetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::userspace::SpecificOrder* response) {
  return ::grpc::internal::BlockingUnaryCall< ::userspace::OrderId, ::userspace::SpecificOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpecificOrder_, context, request, response);
}

void UserOrder::Stub::async::GetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId* request, ::userspace::SpecificOrder* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::userspace::OrderId, ::userspace::SpecificOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpecificOrder_, context, request, response, std::move(f));
}

void UserOrder::Stub::async::GetSpecificOrder(::grpc::ClientContext* context, const ::userspace::OrderId* request, ::userspace::SpecificOrder* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpecificOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::userspace::SpecificOrder>* UserOrder::Stub::PrepareAsyncGetSpecificOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::userspace::SpecificOrder, ::userspace::OrderId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpecificOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::userspace::SpecificOrder>* UserOrder::Stub::AsyncGetSpecificOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpecificOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserOrder::Stub::CreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::userspace::BaseReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::userspace::OrderDetail, ::userspace::BaseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateOrder_, context, request, response);
}

void UserOrder::Stub::async::CreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail* request, ::userspace::BaseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::userspace::OrderDetail, ::userspace::BaseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrder_, context, request, response, std::move(f));
}

void UserOrder::Stub::async::CreateOrder(::grpc::ClientContext* context, const ::userspace::OrderDetail* request, ::userspace::BaseReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>* UserOrder::Stub::PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::userspace::BaseReply, ::userspace::OrderDetail, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>* UserOrder::Stub::AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::userspace::OrderDetail& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserOrder::Stub::UpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::userspace::BaseReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::userspace::UpdateOrderStateRequest, ::userspace::BaseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateOrderState_, context, request, response);
}

void UserOrder::Stub::async::UpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest* request, ::userspace::BaseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::userspace::UpdateOrderStateRequest, ::userspace::BaseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrderState_, context, request, response, std::move(f));
}

void UserOrder::Stub::async::UpdateOrderState(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest* request, ::userspace::BaseReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrderState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>* UserOrder::Stub::PrepareAsyncUpdateOrderStateRaw(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::userspace::BaseReply, ::userspace::UpdateOrderStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateOrderState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::userspace::BaseReply>* UserOrder::Stub::AsyncUpdateOrderStateRaw(::grpc::ClientContext* context, const ::userspace::UpdateOrderStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateOrderStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserOrder::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserOrder_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserOrder::Service, ::userspace::UserId, ::userspace::OrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserOrder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::userspace::UserId* req,
             ::userspace::OrderList* resp) {
               return service->GetOrderList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserOrder_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserOrder::Service, ::userspace::OrderId, ::userspace::SpecificOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserOrder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::userspace::OrderId* req,
             ::userspace::SpecificOrder* resp) {
               return service->GetSpecificOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserOrder_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserOrder::Service, ::userspace::OrderDetail, ::userspace::BaseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserOrder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::userspace::OrderDetail* req,
             ::userspace::BaseReply* resp) {
               return service->CreateOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserOrder_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserOrder::Service, ::userspace::UpdateOrderStateRequest, ::userspace::BaseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserOrder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::userspace::UpdateOrderStateRequest* req,
             ::userspace::BaseReply* resp) {
               return service->UpdateOrderState(ctx, req, resp);
             }, this)));
}

UserOrder::Service::~Service() {
}

::grpc::Status UserOrder::Service::GetOrderList(::grpc::ServerContext* context, const ::userspace::UserId* request, ::userspace::OrderList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserOrder::Service::GetSpecificOrder(::grpc::ServerContext* context, const ::userspace::OrderId* request, ::userspace::SpecificOrder* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserOrder::Service::CreateOrder(::grpc::ServerContext* context, const ::userspace::OrderDetail* request, ::userspace::BaseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserOrder::Service::UpdateOrderState(::grpc::ServerContext* context, const ::userspace::UpdateOrderStateRequest* request, ::userspace::BaseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace userspace

