// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mylogin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mylogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mylogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mylogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mylogin_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mylogin_2eproto;
namespace loginspace {
class UserLoginReply;
struct UserLoginReplyDefaultTypeInternal;
extern UserLoginReplyDefaultTypeInternal _UserLoginReply_default_instance_;
class UserLoginRequest;
struct UserLoginRequestDefaultTypeInternal;
extern UserLoginRequestDefaultTypeInternal _UserLoginRequest_default_instance_;
}  // namespace loginspace
PROTOBUF_NAMESPACE_OPEN
template<> ::loginspace::UserLoginReply* Arena::CreateMaybeMessage<::loginspace::UserLoginReply>(Arena*);
template<> ::loginspace::UserLoginRequest* Arena::CreateMaybeMessage<::loginspace::UserLoginRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace loginspace {

// ===================================================================

class UserLoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:loginspace.UserLoginRequest) */ {
 public:
  inline UserLoginRequest() : UserLoginRequest(nullptr) {}
  ~UserLoginRequest() override;
  explicit PROTOBUF_CONSTEXPR UserLoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLoginRequest(const UserLoginRequest& from);
  UserLoginRequest(UserLoginRequest&& from) noexcept
    : UserLoginRequest() {
    *this = ::std::move(from);
  }

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginRequest& operator=(UserLoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLoginRequest* internal_default_instance() {
    return reinterpret_cast<const UserLoginRequest*>(
               &_UserLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserLoginRequest& a, UserLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLoginRequest& from) {
    UserLoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "loginspace.UserLoginRequest";
  }
  protected:
  explicit UserLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserPhoneFieldNumber = 1,
    kUserPasswordFieldNumber = 2,
    kUserIdentityFieldNumber = 3,
  };
  // string user_phone_ = 1;
  void clear_user_phone_();
  const std::string& user_phone_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_phone_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_phone_();
  PROTOBUF_NODISCARD std::string* release_user_phone_();
  void set_allocated_user_phone_(std::string* user_phone_);
  private:
  const std::string& _internal_user_phone_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_phone_(const std::string& value);
  std::string* _internal_mutable_user_phone_();
  public:

  // string user_password_ = 2;
  void clear_user_password_();
  const std::string& user_password_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_password_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_password_();
  PROTOBUF_NODISCARD std::string* release_user_password_();
  void set_allocated_user_password_(std::string* user_password_);
  private:
  const std::string& _internal_user_password_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_password_(const std::string& value);
  std::string* _internal_mutable_user_password_();
  public:

  // string user_identity_ = 3;
  void clear_user_identity_();
  const std::string& user_identity_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_identity_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_identity_();
  PROTOBUF_NODISCARD std::string* release_user_identity_();
  void set_allocated_user_identity_(std::string* user_identity_);
  private:
  const std::string& _internal_user_identity_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_identity_(const std::string& value);
  std::string* _internal_mutable_user_identity_();
  public:

  // @@protoc_insertion_point(class_scope:loginspace.UserLoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_phone__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_password__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_identity__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mylogin_2eproto;
};
// -------------------------------------------------------------------

class UserLoginReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:loginspace.UserLoginReply) */ {
 public:
  inline UserLoginReply() : UserLoginReply(nullptr) {}
  ~UserLoginReply() override;
  explicit PROTOBUF_CONSTEXPR UserLoginReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLoginReply(const UserLoginReply& from);
  UserLoginReply(UserLoginReply&& from) noexcept
    : UserLoginReply() {
    *this = ::std::move(from);
  }

  inline UserLoginReply& operator=(const UserLoginReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginReply& operator=(UserLoginReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLoginReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLoginReply* internal_default_instance() {
    return reinterpret_cast<const UserLoginReply*>(
               &_UserLoginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserLoginReply& a, UserLoginReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLoginReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLoginReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLoginReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLoginReply& from) {
    UserLoginReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "loginspace.UserLoginReply";
  }
  protected:
  explicit UserLoginReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnMessageFieldNumber = 2,
    kReturnResultFieldNumber = 1,
  };
  // string return_message_ = 2;
  void clear_return_message_();
  const std::string& return_message_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_return_message_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_return_message_();
  PROTOBUF_NODISCARD std::string* release_return_message_();
  void set_allocated_return_message_(std::string* return_message_);
  private:
  const std::string& _internal_return_message_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_return_message_(const std::string& value);
  std::string* _internal_mutable_return_message_();
  public:

  // bool return_result_ = 1;
  void clear_return_result_();
  bool return_result_() const;
  void set_return_result_(bool value);
  private:
  bool _internal_return_result_() const;
  void _internal_set_return_result_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:loginspace.UserLoginReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr return_message__;
    bool return_result__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mylogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserLoginRequest

// string user_phone_ = 1;
inline void UserLoginRequest::clear_user_phone_() {
  _impl_.user_phone__.ClearToEmpty();
}
inline const std::string& UserLoginRequest::user_phone_() const {
  // @@protoc_insertion_point(field_get:loginspace.UserLoginRequest.user_phone_)
  return _internal_user_phone_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginRequest::set_user_phone_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_phone__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:loginspace.UserLoginRequest.user_phone_)
}
inline std::string* UserLoginRequest::mutable_user_phone_() {
  std::string* _s = _internal_mutable_user_phone_();
  // @@protoc_insertion_point(field_mutable:loginspace.UserLoginRequest.user_phone_)
  return _s;
}
inline const std::string& UserLoginRequest::_internal_user_phone_() const {
  return _impl_.user_phone__.Get();
}
inline void UserLoginRequest::_internal_set_user_phone_(const std::string& value) {
  
  _impl_.user_phone__.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginRequest::_internal_mutable_user_phone_() {
  
  return _impl_.user_phone__.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginRequest::release_user_phone_() {
  // @@protoc_insertion_point(field_release:loginspace.UserLoginRequest.user_phone_)
  return _impl_.user_phone__.Release();
}
inline void UserLoginRequest::set_allocated_user_phone_(std::string* user_phone_) {
  if (user_phone_ != nullptr) {
    
  } else {
    
  }
  _impl_.user_phone__.SetAllocated(user_phone_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_phone__.IsDefault()) {
    _impl_.user_phone__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:loginspace.UserLoginRequest.user_phone_)
}

// string user_password_ = 2;
inline void UserLoginRequest::clear_user_password_() {
  _impl_.user_password__.ClearToEmpty();
}
inline const std::string& UserLoginRequest::user_password_() const {
  // @@protoc_insertion_point(field_get:loginspace.UserLoginRequest.user_password_)
  return _internal_user_password_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginRequest::set_user_password_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_password__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:loginspace.UserLoginRequest.user_password_)
}
inline std::string* UserLoginRequest::mutable_user_password_() {
  std::string* _s = _internal_mutable_user_password_();
  // @@protoc_insertion_point(field_mutable:loginspace.UserLoginRequest.user_password_)
  return _s;
}
inline const std::string& UserLoginRequest::_internal_user_password_() const {
  return _impl_.user_password__.Get();
}
inline void UserLoginRequest::_internal_set_user_password_(const std::string& value) {
  
  _impl_.user_password__.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginRequest::_internal_mutable_user_password_() {
  
  return _impl_.user_password__.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginRequest::release_user_password_() {
  // @@protoc_insertion_point(field_release:loginspace.UserLoginRequest.user_password_)
  return _impl_.user_password__.Release();
}
inline void UserLoginRequest::set_allocated_user_password_(std::string* user_password_) {
  if (user_password_ != nullptr) {
    
  } else {
    
  }
  _impl_.user_password__.SetAllocated(user_password_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_password__.IsDefault()) {
    _impl_.user_password__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:loginspace.UserLoginRequest.user_password_)
}

// string user_identity_ = 3;
inline void UserLoginRequest::clear_user_identity_() {
  _impl_.user_identity__.ClearToEmpty();
}
inline const std::string& UserLoginRequest::user_identity_() const {
  // @@protoc_insertion_point(field_get:loginspace.UserLoginRequest.user_identity_)
  return _internal_user_identity_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginRequest::set_user_identity_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_identity__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:loginspace.UserLoginRequest.user_identity_)
}
inline std::string* UserLoginRequest::mutable_user_identity_() {
  std::string* _s = _internal_mutable_user_identity_();
  // @@protoc_insertion_point(field_mutable:loginspace.UserLoginRequest.user_identity_)
  return _s;
}
inline const std::string& UserLoginRequest::_internal_user_identity_() const {
  return _impl_.user_identity__.Get();
}
inline void UserLoginRequest::_internal_set_user_identity_(const std::string& value) {
  
  _impl_.user_identity__.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginRequest::_internal_mutable_user_identity_() {
  
  return _impl_.user_identity__.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginRequest::release_user_identity_() {
  // @@protoc_insertion_point(field_release:loginspace.UserLoginRequest.user_identity_)
  return _impl_.user_identity__.Release();
}
inline void UserLoginRequest::set_allocated_user_identity_(std::string* user_identity_) {
  if (user_identity_ != nullptr) {
    
  } else {
    
  }
  _impl_.user_identity__.SetAllocated(user_identity_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_identity__.IsDefault()) {
    _impl_.user_identity__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:loginspace.UserLoginRequest.user_identity_)
}

// -------------------------------------------------------------------

// UserLoginReply

// bool return_result_ = 1;
inline void UserLoginReply::clear_return_result_() {
  _impl_.return_result__ = false;
}
inline bool UserLoginReply::_internal_return_result_() const {
  return _impl_.return_result__;
}
inline bool UserLoginReply::return_result_() const {
  // @@protoc_insertion_point(field_get:loginspace.UserLoginReply.return_result_)
  return _internal_return_result_();
}
inline void UserLoginReply::_internal_set_return_result_(bool value) {
  
  _impl_.return_result__ = value;
}
inline void UserLoginReply::set_return_result_(bool value) {
  _internal_set_return_result_(value);
  // @@protoc_insertion_point(field_set:loginspace.UserLoginReply.return_result_)
}

// string return_message_ = 2;
inline void UserLoginReply::clear_return_message_() {
  _impl_.return_message__.ClearToEmpty();
}
inline const std::string& UserLoginReply::return_message_() const {
  // @@protoc_insertion_point(field_get:loginspace.UserLoginReply.return_message_)
  return _internal_return_message_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginReply::set_return_message_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.return_message__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:loginspace.UserLoginReply.return_message_)
}
inline std::string* UserLoginReply::mutable_return_message_() {
  std::string* _s = _internal_mutable_return_message_();
  // @@protoc_insertion_point(field_mutable:loginspace.UserLoginReply.return_message_)
  return _s;
}
inline const std::string& UserLoginReply::_internal_return_message_() const {
  return _impl_.return_message__.Get();
}
inline void UserLoginReply::_internal_set_return_message_(const std::string& value) {
  
  _impl_.return_message__.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginReply::_internal_mutable_return_message_() {
  
  return _impl_.return_message__.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginReply::release_return_message_() {
  // @@protoc_insertion_point(field_release:loginspace.UserLoginReply.return_message_)
  return _impl_.return_message__.Release();
}
inline void UserLoginReply::set_allocated_return_message_(std::string* return_message_) {
  if (return_message_ != nullptr) {
    
  } else {
    
  }
  _impl_.return_message__.SetAllocated(return_message_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.return_message__.IsDefault()) {
    _impl_.return_message__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:loginspace.UserLoginReply.return_message_)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace loginspace

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mylogin_2eproto
